name: ðŸ‘€ Collect Stale Environments

run-name: ðŸ‘€ Collect Stale Environments ðŸ‘¾ ${{ github.actor }}

on:
  push:
    branches:
      - feature/CB2-11814

permissions:
  id-token: write
  contents: write

jobs:
  collect-stale-branches:
    name: Collect Stale branches
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    runs-on: X64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: List all branches with pagination
        run: |
          page=1
          per_page=100
          branches=()

          while true; do
            response=$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/dvsa/cvs-svc-app-logs/branches?per_page=$per_page\&page=$page \
              --jq '.[].name | select(test("^(main|master|release|develop|devops|HEAD)$") | not)')
            
            if [[ -z "$response" ]]; then
              break  # Exit loop if no more results
            fi

            branches+=($response)
            ((page++))
          done

          # Output all branches for debugging
          echo "Fetched branches: ${branches[@]}"

      - name: Get commit dates older than 3 months for each branch
        run: |
          three_months_ago=$(date -v -3m +%Y-%m-%d)
          echo "Three months ago: $three_months_ago"
        
          stale_branches=()

          # Loop through each branch and check commit dates
          for branch in "${branches[@]}"; do
            echo "Checking commits for branch: $branch"

            # Fetch the full commit history for the branch to check dates
            commit_dates=$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/dvsa/cvs-svc-app-logs/commits?sha=$branch \
              --jq '.[].commit.committer.date' 2>/dev/null)

            # Debug: Show all commit dates retrieved for the branch
            echo "Commit dates for branch $branch: $commit_dates"

            # Check if commit_dates is empty
            if [[ -z "$commit_dates" ]]; then
              echo "No commits found for branch $branch."
              continue
            fi

            # Loop through each commit date
            while IFS= read -r latest_commit_date; do
              # Debug: Show latest commit date retrieved
              echo "Latest commit date for branch $branch: $latest_commit_date"

              # Parse commit date (from ISO 8601 to YYYY-MM-DD)
              commit_date=$(date -j -f "%Y-%m-%dT%H:%M:%SZ" "$latest_commit_date" "+%Y-%m-%d" 2>/dev/null || echo "")
              
              # Debug: Show parsed commit date
              echo "Parsed commit date for branch $branch: $commit_date"

              # If the commit date couldn't be parsed, skip
              if [[ -z "$commit_date" ]]; then
                echo "Failed to parse commit date for branch $branch."
                continue
              fi

              # Check if the commit date is older than 3 months
              if [[ "$commit_date" < "$three_months_ago" ]]; then
                echo "Branch $branch has a commit older than 3 months: $commit_date"
                stale_branches+=("$branch")
                break  # Stop checking this branch once we find a stale commit
              else
                echo "Branch $branch is active. Last commit: $commit_date"
              fi
            done <<< "$commit_dates"
          done
        
          # Output stale branches
          if [[ ${#stale_branches[@]} -gt 0 ]]; then
            echo "Stale branches (older than 3 months):"
            printf "%s\n" "${stale_branches[@]}"
          else
            echo "No stale branches found."
          fi
