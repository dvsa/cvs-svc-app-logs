[{"filePath":"/Users/Shivangi.Das/Documents/CVS/cvs-svc-app-logs/spec/helpers/integration-test-lifecycle.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/Users/Shivangi.Das/Documents/CVS/cvs-svc-app-logs/spec/helpers/reporter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/Users/Shivangi.Das/Documents/CVS/cvs-svc-app-logs/spec/logs-service.spec.ts","messages":[{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":26,"column":3,"nodeType":"CallExpression","messageId":"noAssertions","endLine":38,"endColumn":5},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":40,"column":3,"nodeType":"CallExpression","messageId":"noAssertions","endLine":48,"endColumn":5}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as supertest from 'supertest';\nimport {\n  startSlsOffline,\n  stopSlsOffline,\n} from './helpers/integration-test-lifecycle';\n\njest.setTimeout(30000);\n\nconst request = supertest('http://localhost:3000');\n\ndescribe('integration test', () => {\n  beforeAll((done) => {\n    startSlsOffline((err: any) => {\n      if (err) {\n        console.error(err);\n        fail();\n      }\n      done();\n    });\n  });\n\n  afterAll(() => {\n    stopSlsOffline();\n  });\n\n  it('should respond 200 for a successful post', (done) => {\n    request\n      .post('/logs')\n      .send({\n        timestamp: new Date().getTime(),\n        message: 'Test error message',\n      })\n      .expect(200)\n      .end((err) => {\n        if (err) throw err;\n        done();\n      });\n  });\n\n  it('should respond 400 for a bad request', (done) => {\n    request\n      .post('/logs')\n      .expect(400)\n      .end((err) => {\n        if (err) throw err;\n        done();\n      });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/Users/Shivangi.Das/Documents/CVS/cvs-svc-app-logs/src/common/application/api/HttpStatus.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/Users/Shivangi.Das/Documents/CVS/cvs-svc-app-logs/src/common/application/api/Response.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/Users/Shivangi.Das/Documents/CVS/cvs-svc-app-logs/src/common/application/api/lambda.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/Users/Shivangi.Das/Documents/CVS/cvs-svc-app-logs/src/common/application/utils/__tests__/createResponse.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/Users/Shivangi.Das/Documents/CVS/cvs-svc-app-logs/src/common/application/utils/createResponse.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/Users/Shivangi.Das/Documents/CVS/cvs-svc-app-logs/src/common/application/utils/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/Users/Shivangi.Das/Documents/CVS/cvs-svc-app-logs/src/functions/postLogs/application/LogEvent.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/Users/Shivangi.Das/Documents/CVS/cvs-svc-app-logs/src/functions/postLogs/application/Logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/Users/Shivangi.Das/Documents/CVS/cvs-svc-app-logs/src/functions/postLogs/application/__tests__/Logger.spec.ts","messages":[{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":16,"column":5,"nodeType":"CallExpression","messageId":"noAssertions","endLine":25,"endColumn":7},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":27,"column":5,"nodeType":"CallExpression","messageId":"noAssertions","endLine":54,"endColumn":7},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":58,"column":5,"nodeType":"CallExpression","messageId":"noAssertions","endLine":78,"endColumn":7},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":80,"column":5,"nodeType":"CallExpression","messageId":"noAssertions","endLine":98,"endColumn":7}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Mock, It, Times } from 'typemoq';\nimport LogEvent from '../LogEvent';\nimport Logger, { LogDelegate } from '../Logger';\n\ndescribe('Logger', () => {\n  const moqLogDelegate = Mock.ofType<LogDelegate>();\n  let sut: Logger;\n\n  beforeEach(() => {\n    moqLogDelegate.reset();\n\n    sut = new Logger(moqLogDelegate.object, 'exampleTestLogger');\n  });\n\n  describe('logEvents', () => {\n    it('should call `logDelegate` as expected', async () => {\n      // ACT\n      await sut.logEvents(Array(3).fill(Mock.ofType<LogEvent>().object));\n\n      // ASSERT\n      moqLogDelegate.verify(\n        (x) => x(It.is<LogEvent[]>((evnts) => evnts.length === 3)),\n        Times.once()\n      );\n    });\n\n    it('should swallow, and output to console error, any exceptions', async () => {\n      moqLogDelegate\n        .setup((x) => x(It.isAny()))\n        .throws(new Error('example external logging system error'));\n\n      const moqConsoleError = Mock.ofInstance(console.error);\n      spyOn(console, 'error').and.callFake(moqConsoleError.object);\n\n      // ACT\n      await sut.logEvents([Mock.ofType<LogEvent>().object]);\n\n      // ASSERT\n      moqConsoleError.verify(\n        (x) =>\n          x('Error occurred while attempting to log events to logging system:'),\n        Times.once()\n      );\n\n      moqConsoleError.verify(\n        (x) =>\n          x(\n            It.is<Error>(\n              (e) => e.message === 'example external logging system error'\n            )\n          ),\n        Times.once()\n      );\n    });\n  });\n\n  describe('log', () => {\n    it('should call `logDelegate` as expected', async () => {\n      // ACT\n      await sut.log('test log message', 'info', { value: 1234 });\n\n      // ASSERT\n      moqLogDelegate.verify(\n        (x) =>\n          x(\n            It.is<LogEvent[]>(\n              (evnts) =>\n                evnts.length === 1\n                && evnts[0].timestamp > 0\n                && evnts[0].timestamp <= new Date().getTime()\n                && /test log message/.test(evnts[0].message)\n                && /info/.test(evnts[0].message)\n                && /1234/.test(evnts[0].message)\n            )\n          ),\n        Times.once()\n      );\n    });\n\n    it('additional `logData` overrides other arguments', async () => {\n      // ACT\n      await sut.log('test log message', 'info', { logLevel: 'other' });\n\n      // ASSERT\n      moqLogDelegate.verify(\n        (x) =>\n          x(\n            It.is<LogEvent[]>(\n              (evnts) =>\n                evnts.length === 1\n                && /test log message/.test(evnts[0].message)\n                && !/info/.test(evnts[0].message)\n                && /other/.test(evnts[0].message)\n            )\n          ),\n        Times.once()\n      );\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/Users/Shivangi.Das/Documents/CVS/cvs-svc-app-logs/src/functions/postLogs/framework/LogMessage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/Users/Shivangi.Das/Documents/CVS/cvs-svc-app-logs/src/functions/postLogs/framework/__tests__/createLogger.spec.ts","messages":[{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":102,"column":5,"nodeType":"CallExpression","messageId":"noAssertions","endLine":126,"endColumn":7},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":128,"column":5,"nodeType":"CallExpression","messageId":"noAssertions","endLine":147,"endColumn":7},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":149,"column":5,"nodeType":"CallExpression","messageId":"noAssertions","endLine":194,"endColumn":7},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":238,"column":5,"nodeType":"CallExpression","messageId":"noAssertions","endLine":253,"endColumn":7}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as awsSdkMock from 'aws-sdk-mock';\nimport { Mock, It, Times } from 'typemoq';\nimport { CloudWatchLogs } from 'aws-sdk';\nimport * as logger from '../createLogger';\nimport { LogDelegate } from '../../application/Logger';\n\ndescribe('logging', () => {\n  const originalConsoleLog = console.log;\n  const moqConsoleLog = Mock.ofInstance(console.log);\n  const moqCreateLogStream = Mock.ofInstance(\n    new CloudWatchLogs().createLogStream\n  );\n  const moqPutLogEvents = Mock.ofInstance(new CloudWatchLogs().putLogEvents);\n\n  beforeEach(() => {\n    moqConsoleLog.reset();\n    moqCreateLogStream.reset();\n    moqPutLogEvents.reset();\n\n    moqCreateLogStream\n      .setup((x) => x(It.isAny(), It.isAny()))\n      .returns(() => <any>(<unknown>Promise.resolve(true)));\n\n    moqPutLogEvents\n      .setup((x) => x(It.isAny(), It.isAny()))\n      .returns(() => <any>(<unknown>Promise.resolve(true)));\n\n    moqConsoleLog\n      .setup((x) => x(It.isAny(), It.isAny()))\n      .callback((message?: any, ...optionalParams: any[]) =>\n        originalConsoleLog(message, ...optionalParams));\n\n    awsSdkMock.mock(\n      'CloudWatchLogs',\n      'createLogStream',\n      moqCreateLogStream.object\n    );\n    awsSdkMock.mock('CloudWatchLogs', 'putLogEvents', moqPutLogEvents.object);\n\n    spyOn(console, 'log').and.callFake(moqConsoleLog.object);\n  });\n\n  afterEach(() => {\n    awsSdkMock.restore('CloudWatchLogs', 'createLogStream');\n    awsSdkMock.restore('CloudWatchLogs', 'putLogEvents');\n  });\n\n  describe('createLogger', () => {\n    const sut = logger.createLogger;\n\n    const initialisedConsoleLogging = 'Initialised console logging';\n    const initialisedCloudWatchLogging = 'Initialised Custom CloudWatch logging';\n\n    it('creates a console logger if no CloudWatch LogGroupName specified', async () => {\n      // ACT\n      const result = await sut('testLogger', undefined);\n\n      // ASSERT\n      expect(result).toBeDefined();\n      expect(result.loggerName).toBe('testLogger');\n\n      moqConsoleLog.verify(\n        (x) =>\n          x(It.is<string>((s) => s.indexOf(initialisedConsoleLogging) !== -1)),\n        Times.once()\n      );\n      moqConsoleLog.verify(\n        (x) =>\n          x(\n            It.is<string>((s) => s.indexOf(initialisedCloudWatchLogging) !== -1)\n          ),\n        Times.never()\n      );\n    });\n\n    it('creates a CloudWatch logger if CloudWatch LogGroupName is specified', async () => {\n      // ACT\n      const result = await sut('testLogger', 'cloudWatchLogGroupName');\n\n      // ASSERT\n      expect(result).toBeDefined();\n      expect(result.loggerName).toBe('testLogger');\n\n      moqConsoleLog.verify(\n        (x) =>\n          x(It.is<string>((s) => s.indexOf(initialisedConsoleLogging) !== -1)),\n        Times.never()\n      );\n      moqConsoleLog.verify(\n        (x) =>\n          x(\n            It.is<string>((s) => s.indexOf(initialisedCloudWatchLogging) !== -1)\n          ),\n        Times.once()\n      );\n    });\n  });\n\n  describe('createCloudWatchLogger', () => {\n    const sut = logger.createCloudWatchLogger;\n\n    it('creates a log delegate that logs to CloudWatch', async () => {\n      // ACT\n      const result: LogDelegate = await sut(\n        'testLoggerName',\n        'testLogGroupName'\n      );\n      await result([\n        { timestamp: 265473, message: 'test log message to cloudwatch' },\n      ]);\n\n      // ASSERT\n      moqPutLogEvents.verify(\n        (x) =>\n          x(\n            It.is<CloudWatchLogs.Types.PutLogEventsRequest>(\n              (r) =>\n                r.logEvents[0].message === 'test log message to cloudwatch'\n                && r.logGroupName === 'testLogGroupName'\n                && r.logStreamName.indexOf('testLoggerName') > -1\n            ),\n            It.isAny()\n          ),\n        Times.once()\n      );\n    });\n\n    it('should call the `createLogStream` CloudWatchLogs method correctly', async () => {\n      // ACT\n      await sut('testLoggerName', 'testLogGroupName');\n\n      // ASSERT\n      moqCreateLogStream.verify(\n        (x) =>\n          x(\n            It.is<CloudWatchLogs.Types.CreateLogStreamRequest>(\n              (r) =>\n                r.logGroupName === 'testLogGroupName'\n                && /^testLoggerName-\\d\\d\\d\\d-\\d\\d-\\d\\d-[0-9a-f]{32}$/.test(\n                  r.logStreamName\n                )\n            ),\n            It.isAny()\n          ),\n        Times.once()\n      );\n    });\n\n    it('should use `sequenceToken` from previous `putLogEvents` result', async () => {\n      moqPutLogEvents.reset();\n      moqPutLogEvents\n        .setup((x) => x(It.isAny(), It.isAny()))\n        .returns(\n          () => <any>(<unknown>Promise.resolve({\n            nextSequenceToken: 'example-sequenceToken-123',\n          }))\n        );\n\n      // ACT\n      const result = await sut('testLoggerName', 'testLogGroupName');\n      await result([\n        { timestamp: 1, message: 'test log message to cloudwatch 1' },\n      ]);\n      await result([\n        { timestamp: 2, message: 'test log message to cloudwatch 2' },\n      ]);\n\n      // ASSERT\n      moqPutLogEvents.verify(\n        (x) =>\n          x(\n            It.is<CloudWatchLogs.Types.PutLogEventsRequest>(\n              (r) =>\n                r.logEvents[0].message === 'test log message to cloudwatch 1'\n                && r.sequenceToken === undefined\n            ),\n            It.isAny()\n          ),\n        Times.once()\n      );\n\n      moqPutLogEvents.verify(\n        (x) =>\n          x(\n            It.is<CloudWatchLogs.Types.PutLogEventsRequest>(\n              (r) =>\n                r.logEvents[0].message === 'test log message to cloudwatch 2'\n                && r.sequenceToken === 'example-sequenceToken-123'\n            ),\n            It.isAny()\n          ),\n        Times.once()\n      );\n    });\n\n    it('should swallow a `ResourceAlreadyExistsException` error', async () => {\n      awsSdkMock.remock('CloudWatchLogs', 'createLogStream', async () => {\n        throw {\n          errorType: 'ResourceAlreadyExistsException',\n        };\n      });\n\n      // ACT\n      const result = await sut('testLoggerName', 'testLogGroupName');\n\n      // ASSERT\n      expect(result).toBeDefined();\n    });\n\n    it('should throw on any other exceptions', async () => {\n      awsSdkMock.remock('CloudWatchLogs', 'createLogStream', async () => {\n        throw {\n          errorType: 'SomeOtherException',\n        };\n      });\n\n      let errorThrown: any | undefined;\n      let wasErrorThrown = false;\n\n      // ACT\n      try {\n        await sut('testLoggerName', 'testLogGroupName');\n      } catch (e) {\n        errorThrown = e;\n        wasErrorThrown = true;\n      }\n\n      // ASSERT\n      expect(wasErrorThrown).toBe(true);\n      expect(errorThrown).toBeDefined();\n      expect(errorThrown.errorType).toBe('SomeOtherException');\n    });\n  });\n\n  describe('createConsoleLogger', () => {\n    const sut = logger.createConsoleLogger;\n\n    it('creates a log delegate that logs to the console', async () => {\n      // ACT\n      const result: LogDelegate = sut('testLoggerName');\n      await result([{ timestamp: 347574, message: 'an example log message' }]);\n\n      // ASSERT\n      moqConsoleLog.verify(\n        (x) =>\n          x(\n            It.is<string>((s) => /testLoggerName:/.test(s)),\n            It.is<any>((args) =>\n              /^an example log message$/.test(args[0].message))\n          ),\n        Times.once()\n      );\n    });\n  });\n\n  describe('uniqueLogStreamName', () => {\n    const sut = logger.uniqueLogStreamName;\n\n    it('returns a string in the expected format', () => {\n      // ACT\n      const result = sut('LoggerName');\n\n      // ASSERT\n      expect(result).toMatch(/^LoggerName-\\d\\d\\d\\d-\\d\\d-\\d\\d-[0-9a-f]{32}$/);\n    });\n\n    it('generates unique names each time', () => {\n      const results = new Set();\n      const countToGenerate = 50000;\n\n      // ACT\n      for (let i = 0; i < countToGenerate; i += 1) {\n        const result = sut('LoggerName');\n        results.add(result);\n      }\n\n      // ASSERT\n      expect(results.size).toEqual(countToGenerate);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/Users/Shivangi.Das/Documents/CVS/cvs-svc-app-logs/src/functions/postLogs/framework/__tests__/handler.spec.ts","messages":[{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":29,"column":3,"nodeType":"CallExpression","messageId":"noAssertions","endLine":46,"endColumn":5}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Mock, It, Times } from 'typemoq';\nimport { APIGatewayProxyEvent, Context } from 'aws-lambda';\nimport { HttpStatus } from '../../../../common/application/api/HttpStatus';\nimport * as createLogger from '../createLogger';\nimport * as transformLogMessages from '../transformLogMessages';\nimport LogEvent from '../../application/LogEvent';\nimport * as handler from '../handler';\nimport Logger from '../../application/Logger';\n\ndescribe('handler', () => {\n  const moqEvent = Mock.ofType<APIGatewayProxyEvent>();\n  const moqContext = Mock.ofType<Context>();\n  const moqLogger = Mock.ofType<Logger>();\n\n  const sut = handler.handler;\n\n  beforeEach(() => {\n    moqEvent.reset();\n    moqContext.reset();\n    moqLogger.reset();\n\n    moqEvent.setup((x) => x.body).returns(() => null);\n\n    handler.setLogger(moqLogger.object);\n\n    delete process.env.MOBILE_APP_LOGS_CWLG_NAME;\n  });\n\n  it('should call `createLogger` as expected', async () => {\n    handler.setLogger(null);\n\n    delete process.env.MOBILE_APP_LOGS_CWLG_NAME;\n    process.env.MOBILE_APP_LOGS_CWLG_NAME = 'example-mobile-app-cwlg-name';\n\n    const moqCreateLogger = Mock.ofInstance(createLogger.createLogger);\n    spyOn(createLogger, 'createLogger').and.callFake(moqCreateLogger.object);\n\n    // ACT\n    await sut(moqEvent.object, moqContext.object);\n\n    // ASSERT\n    moqCreateLogger.verify(\n      (x) => x('LogsServiceLogger', 'example-mobile-app-cwlg-name'),\n      Times.once()\n    );\n  });\n\n  it('should return 400 Bad Request if the HTTP request body is null', async () => {\n    moqEvent.reset();\n    moqEvent.setup((x) => x.body).returns(() => null);\n\n    // ACT\n    const result = await sut(moqEvent.object, moqContext.object);\n\n    // ASSERT\n    expect(result.statusCode).toBe(400);\n    expect(result.statusCode).toEqual(HttpStatus.BAD_REQUEST);\n    expect(result.body).toMatch(\n      /Bad Request: request body should contain JSON array of log messages/\n    );\n  });\n\n  it('should return 400 Bad Request if the HTTP request body is undefined', async () => {\n    moqEvent.reset();\n    moqEvent.setup((x) => x.body).returns(() => <any>(<unknown>undefined));\n\n    // ACT\n    const result = await sut(moqEvent.object, moqContext.object);\n\n    // ASSERT\n    expect(result.statusCode).toBe(400);\n    expect(result.statusCode).toEqual(HttpStatus.BAD_REQUEST);\n    expect(result.body).toMatch(\n      /Bad Request: request body should contain JSON array of log messages/\n    );\n  });\n\n  it('should return 200 and a message, and call transformLogMessages and logger, if the HTTP request body is set', async () => {\n    moqEvent.reset();\n    moqEvent.setup((x) => x.body).returns(() => '{}');\n\n    const moqTransformLogMessages = Mock.ofInstance(\n      transformLogMessages.default\n    );\n    spyOn(transformLogMessages, 'default').and.callFake(\n      moqTransformLogMessages.object\n    );\n\n    moqTransformLogMessages\n      .setup((x) => x(It.isAny()))\n      .returns(() => Array(12).fill(Mock.ofType<LogEvent>().object));\n\n    // ACT\n    const result = await sut(moqEvent.object, moqContext.object);\n\n    // ASSERT\n    expect(result.statusCode).toBe(200);\n    moqLogger.verify(\n      (x) => x.logEvents(It.is<LogEvent[]>((evnts) => evnts.length === 12)),\n      Times.once()\n    );\n    moqTransformLogMessages.verify((x) => x(It.isAny()), Times.once());\n    expect(result.body).toMatch(/12 log messages were received and saved./);\n  });\n\n  it('should throw an error if the HTTP request body is invalid JSON.', async () => {\n    moqEvent.reset();\n    moqEvent.setup((x) => x.body).returns(() => '{invalid-json');\n\n    let wasErrorThrown = false;\n\n    // ACT\n    try {\n      await sut(moqEvent.object, moqContext.object);\n    } catch (e) {\n      wasErrorThrown = true;\n    }\n\n    // ASSERT\n    expect(wasErrorThrown).toBe(true);\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/Users/Shivangi.Das/Documents/CVS/cvs-svc-app-logs/src/functions/postLogs/framework/__tests__/transformLogMessages.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/Users/Shivangi.Das/Documents/CVS/cvs-svc-app-logs/src/functions/postLogs/framework/createLogger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/Users/Shivangi.Das/Documents/CVS/cvs-svc-app-logs/src/functions/postLogs/framework/handler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/Users/Shivangi.Das/Documents/CVS/cvs-svc-app-logs/src/functions/postLogs/framework/transformLogMessages.ts","messages":[],"suppressedMessages":[{"ruleId":"no-nested-ternary","severity":2,"message":"Do not nest ternary expressions.","line":9,"column":5,"nodeType":"ConditionalExpression","messageId":"noNestedTernary","endLine":13,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]}]